{{- if .Values.knativeDeploy }}
{{- else }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    draft: {{ default "draft-app" .Values.draft }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
{{- if .Values.deploymentLabels }}
{{ toYaml .Values.deploymentLabels | indent 4 }}
{{- end }}
spec:
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
{{- if .Values.hpa.enabled }}
{{- else }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  template:
    metadata:
      labels:
        draft: {{ default "draft-app" .Values.draft }}
        app: {{ template "fullname" . }}
{{- if .Values.podsLabels }}
{{ toYaml .Values.podsLabels | indent 6 }}
{{- end }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
{{- if .Values.affinity }}    
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}    
{{- if .Values.serviceAccount.enabled }}
{{- if .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
{{- else }}
      serviceAccountName: {{ template "fullname" . }}
{{- end }}
{{- end }}
{{- if .Values.volumes }}
      volumes:
{{ toYaml .Values.volumes | indent 10 }}
{{- end }}
      initContainers:
        - name: init-vault-secret
          image: bitnami/kubectl:1.20.2
          command:
          - /bin/sh
          - -c
          args:
          - kubectl get secret -n jx-vault vault-tls -o jsonpath='{.data.ca\.crt}' |
            base64 --decode > /tmp/vault/ca.crt
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/vault
            name: vault-cacert
        - name: init-vault-secret-jks
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          # command:
          #   - keytool
          #   - -importcert 
          #   - -storepass 
          #   - changeit 
          #   - -noprompt 
          #   - -file 
          #   - /vault/cacert/ca.crt 
          #   - -keystore 
          #   - /vault/jkscacert/ca.jks
          command:
            - keytool
            - -import
            - -trustcacerts 
            - -alias 
            - vaultca
            - -noprompt 
            - -file 
            - /vault/cacert/ca.crt 
            - -keystore 
            - /usr/lib/jvm/java-17-amazon-corretto/lib/security/cacerts 
            - -storepass 
            - changeit

          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts: 
          - name: vault-cacert
            mountPath: /vault/cacert
          # - name: vault-jks-cacert
          #   mountPath: /vault/jkscacert 
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: VERSION
          value: {{ .Chart.Version }}
        - name: IMAGE
          value: {{ .Values.image.tag }}
{{- if .Values.fieldRef}}
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
{{- end }}              
{{- range $pkey, $pval := .Values.env }}
        - name: {{ $pkey }}
          value: {{ quote $pval }}
{{- end }}
{{- if .Values.fieldRef }}              
{{- end }}
        envFrom:
{{ toYaml .Values.envFrom | indent 10 }}
{{- if .Values.volumeMounts }}
        volumeMounts:
{{ toYaml .Values.volumeMounts | indent 10 }}        
{{- end }}
        ports:
        - name: http
          containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.probePath | default .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.probePath | default .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      imagePullSecrets:
{{- range $pval := .Values.jx.imagePullSecrets }}
      - name: {{ quote $pval }}
{{- end }}
{{- end }}
